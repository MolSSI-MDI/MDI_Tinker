code_name: 'Tinker'
docker:
  image_name: 'mdi/tinker'

  build_image:
    - apt-get update
    - apt-get install -y git vim
    - pip install cmake

  build_engine:
    - |
      if [ ! -d "build/tinker" ]; then
        git clone https://github.com/MolSSI-MDI/Tinker.git --branch mdi-rebase build/tinker
      fi
    - cd build/tinker/dev
    #- ./full_build.sh
    - ./rebuild.sh

  validate_engine:
    # Confirm that the engine's executable exists
    - ENGINE_EXECUTABLE="build/tinker/build/tinker/source/dynamic.x"
    - |
      if test -f "$ENGINE_EXECUTABLE"; then
        echo "$ENGINE_EXECUTABLE exists"
      else
        echo "Could not find engine executable: $ENGINE_EXECUTABLE"
        exit 1
      fi

engine_tests:
  # Provide at least one example input that can be used to test your code's MDI functionality
  script:
    #- cd tests/water
    #- cp ../../build/tinker/build/tinker/params/amoebabio18.prm .

    # Run the dynamic.x code
    #- ../../build/tinker/build/tinker/source/dynamic.x tinker.in amoebabio18.prm -k tinker.key -mdi "${MDI_OPTIONS}" 1000 1.0 10.0 2 298.0 778.0 > tinker.out

    # Run the analyze.x code
    #- ../../build/tinker/build/tinker/source/analyze.x tinker.in amoebabio18.prm -k tinker.key -mdi "${MDI_OPTIONS}" GEV > tinker.out

    - cd tests/poltest
    - ../../build/tinker/build/tinker/source/analyze.x tinker.in amoebabio18.prm -k simple.key -mdi "${MDI_OPTIONS}" E > tinker.out


run_scripts:
  test:
    containers:
      container1:
        image: 'mdi/tinker'
        script:
          - cd tests/polarize
          - ../../build/tinker/build/tinker/source/analyze.x box.xyz amoebabio18.prm -k box.key E > box.out
          
run_scripts:
  analyze2:
    containers:
      container1:
        image: 'mdi/tinker'
        script:
          - cd tests/polarize
          - ../../build/tinker/build/tinker/source/analyze.x box.xyz amoebabio18.prm -k analyze2.key E > analyze2.out



test_drivers:
  dynamic_driver:
    script:
      - cd tests/driver
      - python driver.py -mdi "-role DRIVER -name driver -method TCP -port 8021"

  analyze_driver:
    script:
      - cd tests/driver
      - python analyze_driver.py -mdi "-role DRIVER -name driver -method TCP -port 8021"

  poltest:
    script:
      - cd tests/poltest
      - python driver.py -mdi "-role DRIVER -name driver -method TCP -port 8021"


